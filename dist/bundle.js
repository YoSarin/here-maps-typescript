!function(e){var t={};function r(n){if(t[n])return t[n].exports;var o=t[n]={i:n,l:!1,exports:{}};return e[n].call(o.exports,o,o.exports,r),o.l=!0,o.exports}r.m=e,r.c=t,r.d=function(e,t,n){r.o(e,t)||Object.defineProperty(e,t,{enumerable:!0,get:n})},r.r=function(e){"undefined"!=typeof Symbol&&Symbol.toStringTag&&Object.defineProperty(e,Symbol.toStringTag,{value:"Module"}),Object.defineProperty(e,"__esModule",{value:!0})},r.t=function(e,t){if(1&t&&(e=r(e)),8&t)return e;if(4&t&&"object"==typeof e&&e&&e.__esModule)return e;var n=Object.create(null);if(r.r(n),Object.defineProperty(n,"default",{enumerable:!0,value:e}),2&t&&"string"!=typeof e)for(var o in e)r.d(n,o,function(t){return e[t]}.bind(null,o));return n},r.n=function(e){var t=e&&e.__esModule?function(){return e.default}:function(){return e};return r.d(t,"a",t),t},r.o=function(e,t){return Object.prototype.hasOwnProperty.call(e,t)},r.p="",r(r.s=0)}([function(e,t,r){"use strict";r.r(t);var n=function(){function e(e){this.platform=new H.service.Platform({apikey:e})}return e.Init=function(){var t=document.getElementsByTagName("head")[0];t.appendChild(e.createScriptElement(e.coreLink)),t.appendChild(e.createScriptElement(e.serviceLink))},e.createScriptElement=function(e,t,r){void 0===t&&(t="text/javascript"),void 0===r&&(r="utf-8");var n=document.createElement("script");return n.setAttribute("src",e),n.setAttribute("type",t),n.setAttribute("charset",r),n},e.prototype.DrawMapInto=function(e){var t=this.platform.createDefaultLayers();new H.Map(e,t.vector.normal.map,{zoom:10,center:{lat:52.5,lng:13.4}})},e.coreLink="https://js.api.here.com/v3/3.1/mapsjs-core.js",e.serviceLink="https://js.api.here.com/v3/3.1/mapsjs-service.js",e}();n.Init(),window.onload=function(){new n("ejTEZJO50XcYpGX-FudQXN6PE6X9BiMdTu8eRGiMj_s").DrawMapInto(document.getElementById("mapContainer"))}}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,